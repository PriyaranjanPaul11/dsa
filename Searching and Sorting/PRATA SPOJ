#include<vector>
#include <iostream>
#include<algorithm>
using namespace std;


bool isPossibleSolution(vector<int>cooksRanks,int P,int mid){
    int currP=0; //initial cooked paratha count 
    for(int i=0;i<cooksRanks.size();i++){
        int R=cooksRanks[i];
        int j=1;
        int timeTaken=0;
        
        while(true){
            if(timeTaken+j*R<=mid){
                currP++;
                timeTaken+=j*R;
                j++;
                
            }
            else{
                break;
            }
        }
        if(currP>=P){
            return true;
        }
        
    }
    return false;
}

int minTimeToCompleteOrder(vector<int>cooksRanks,int P){
    int start=0;
    int highestRank=*max_element(cooksRanks.begin(),cooksRanks.end());
    int end=highestRank*(P*(P+1)/2);
    int ans=-1;
    
    
    while(start<=end){
        int mid=(start+end)/2;
        
        if(isPossibleSolution(cooksRanks,P,mid)){
            ans=mid;
            end=mid-1;
        }
        else{
            start=mid+1;
            
        }
    }
    return ans;
    
}

int main()
{
    int T;
    cin>>T;
    while(T--){
        int P;
        int C;
        cin>>P>>C;
        vector<int>cooksRanks;
        while(C--){
            int R;
            cin>>R;
            cooksRanks.push_back(R);
            
        }
        cout<<minTimeToCompleteOrder(cooksRanks,P)<<endl;
    }

    return 0;
}
